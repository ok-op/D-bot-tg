name: Extract Docker Image

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  extract:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read Docker Image URL from text file
        id: get_image_url
        run: |
          IMAGE_URL=$(cat image_url.txt)
          echo "Using Docker image URL: $IMAGE_URL"
          echo "IMAGE_URL=$IMAGE_URL" >> $GITHUB_ENV

      - name: Pull Docker image
        run: docker pull ${{ env.IMAGE_URL }}

      - name: Create and export container
        run: |
          docker create --name tempcontainer ${{ env.IMAGE_URL }}
          docker export tempcontainer > stream.tar
          docker rm tempcontainer

      - name: Split the Docker image if needed
        run: |
          FILE_SIZE=$(stat --format="%s" stream.tar)
          if [ $FILE_SIZE -gt 52428800 ]; then  # 50MB
            echo "Splitting the file into 49MB chunks..."
            split -b 49M stream.tar part_
          else
            echo "File is less than 50MB, no split required."
          fi
          ls -lh

      - name: Print file size
        run: |
          FILE_SIZE=$(stat --format="%s" stream.tar)
          echo "File size: $FILE_SIZE bytes"

      - name: Upload to Telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          IMAGE_TITLE="${{ env.IMAGE_URL }}"
          FILE_SIZE=$(du -h stream.tar | cut -f1)

          echo "Uploading the file..." > upload_log.txt

          curl -sL "https://graph.org/file/4e8a1172e8ba4b7a0bdfa.jpg" -o thumb.jpg

          if ls part_* 1> /dev/null 2>&1; then
            echo "Uploading split parts" >> upload_log.txt
            for part in part_*; do
              PART_SIZE=$(du -h "$part" | cut -f1)
              echo "Uploading part: $part ($PART_SIZE)" >> upload_log.txt

              CAPTION="🧱 *Docker Image:*"$'\n'
              CAPTION+="\`${IMAGE_TITLE}\`"$'\n'
              CAPTION+="📦 *Part:* \`${part}\`"$'\n'
              CAPTION+="📐 *Size:* \`${PART_SIZE}\`"

              curl -s -F "document=@$part" -F "chat_id=$CHAT_ID" \
                   -F "caption=$CAPTION" -F "parse_mode=Markdown" \
                   -F "thumb=@thumb.jpg" \
                   "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument"
              sleep 2
            done
          else
            echo "Uploading the whole stream.tar" >> upload_log.txt

            CAPTION="🧱 Docker Image:"$'\n'
            CAPTION+="\`${IMAGE_TITLE}\`"$'\n'
            CAPTION+="📐 Size: \`${FILE_SIZE}\`"

            curl -s -F "document=@stream.tar" -F "chat_id=$CHAT_ID" \
                 -F "caption=$CAPTION" -F "parse_mode=Markdown" \
                 -F "thumb=@thumb.jpg" \
                 "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument"
          fi

          echo "Upload completed." >> upload_log.txt

      - name: Send upload log to Telegram
        env:
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          CHAT_ID: ${{ secrets.CHAT_ID }}
        run: |
          curl -s -F "document=@upload_log.txt" -F "chat_id=$CHAT_ID" \
               -F "caption=📄 Upload Log File" \
               -F "thumb=@thumb.jpg" \
               "https://api.telegram.org/bot${BOT_TOKEN}/sendDocument"
